#!/usr/bin/env python3
import rospy
import tf
from tf.transformations import euler_from_quaternion
from nav_msgs.msg import Odometry
from flask import Flask, render_template, request
import os
import threading

app = Flask(__name__, static_url_path='/assets')


@app.route("/")
def index():
    return render_template('index.html', ros_ip=os.environ["ROS_IP"])

@app.route("/navi")
def navi():
    return render_template('nav.html', ros_ip=os.environ["ROS_IP"])

@app.route("/maps")
def nav():
    return render_template('maps.html', ros_ip=os.environ["ROS_IP"])

@app.route("/shutdown", methods=['GET'])
def shutdown():
    shutdown_func = request.environ.get('werkzeug.server.shutdown')
    if shutdown_func is None:
        raise RuntimeError('Not running werkzeug')
    shutdown_func()
    return "Shutting down..."


def start():
    app.run(host=os.environ["ROS_IP"], port=port, debug=True, threaded=False)
    # app.run(host=os.environ["ROS_IP"], port=port, debug=True, threaded=True)


def stop():
    import requests
    resp = requests.get("http://{}:{}/shutdown".format(os.environ["ROS_IP"], port))





if __name__ == '__main__':
    try:

        rospy.init_node('webnode', anonymous=True)
        port = 7777
        # rospy.on_shutdown(stop)
        print("http://{}:{}".format(os.environ["ROS_IP"], port))
        start()
        # t1 = threading.Thread(target=start).start()

        rospy.spin()

    except rospy.ROSInterruptException:
        pass